<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>WANEJ - Activit√©s</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="activities-container">
        <%- include('partials/dashboard-header', { 
            title: 'Activit√©s WANEJ', 
            showPoints: true,
            backLink: { url: '/dashboard', text: 'Dashboard' }
        }) %>

        <div class="activities-content">
            <div class="activities-grid" id="activitiesGrid">
                <!-- Les activit√©s seront charg√©es ici -->
            </div>
        </div>
    </div>

    <div id="loadingSpinner" class="loading-spinner">
        <div class="spinner"></div>
        <p>Chargement des activit√©s...</p>
    </div>

    <script>
        // Fonction pour √©chapper les balises HTML
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        async function loadActivities() {
            try {
                const response = await fetch('/api/activities');
                const data = await response.json();
                
                if (response.ok) {
                    displayActivities(data.activities);
                } else {
                    // Gestion sp√©cifique des erreurs
                    let errorMessage = 'Erreur lors du chargement des activit√©s';
                    
                    if (response.status === 400) {
                        errorMessage = data.error || 'Vous devez faire partie d\'une √©quipe pour acc√©der aux activit√©s';
                    } else if (response.status === 401) {
                        errorMessage = 'Vous devez √™tre connect√© pour acc√©der aux activit√©s';
                        // Rediriger vers la page de connexion apr√®s 3 secondes
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 3000);
                    } else if (response.status === 403) {
                        errorMessage = 'Vous n\'avez pas l\'autorisation d\'acc√©der aux activit√©s';
                    } else {
                        errorMessage = data.error || errorMessage;
                    }
                    
                    showError(errorMessage);
                }
            } catch (error) {
                console.error('Erreur de connexion:', error);
                showError('Erreur de connexion au serveur. V√©rifiez votre connexion internet.');
            } finally {
                document.getElementById('loadingSpinner').style.display = 'none';
            }
        }

        function displayActivities(activities) {
            const grid = document.getElementById('activitiesGrid');
            grid.innerHTML = '';

            if (activities.length === 0) {
                grid.innerHTML = `
                    <div style="grid-column: 1 / -1; display: flex; justify-content: center;">
                        <div class="profile-section" style="max-width: 500px; text-align: center;">
                            <div class="activity-icon" style="font-size: 4rem; margin-bottom: 1rem;">üìö</div>
                            <h3 style="color: #3a86ff; margin: 0 0 1rem 0;">Aucune activit√© disponible</h3>
                            <p style="color: #666; margin: 0 0 1.5rem 0;">
                                Il n'y a actuellement aucune activit√© disponible dans votre session.
                            </p>
                            <div>
                                <button onclick="location.reload()" class="btn btn-primary" style="margin-right: 0.5rem;">üîÑ Actualiser</button>
                                <a href="/dashboard" class="btn btn-outline">Retour au dashboard</a>
                            </div>
                        </div>
                    </div>
                `;
                return;
            }

            activities.forEach(activity => {
                const card = createActivityCard(activity);
                grid.appendChild(card);
            });
        }

        function createActivityCard(activity) {
            const card = document.createElement('div');
            card.className = 'activity-card';
            
            const progressPercent = activity.progress.isCompleted ? 100 : 
                (activity.progress.currentStep / (activity.content?.steps?.length || 1)) * 100;
            
            const categoryIcons = {
                'souris': 'üñ±Ô∏è',
                'internet': 'üåê',
                'security': 'üîí',
                'html': 'üíª',
                'quiz': 'üé≤'
            };

            const difficultyColors = {
                'beginner': '#22c55e',
                'intermediate': '#f59e0b',
                'advanced': '#ef4444'
            };

            const difficultyLabels = {
                'beginner': 'D√©butant',
                'intermediate': 'Interm√©diaire',
                'advanced': 'Avanc√©'
            };

            // D√©terminer le statut de l'activit√©
            let statusInfo = '';
            let actionButton = '';
            
            if (activity.teamState.isCompleted) {
                const completedBy = activity.teamState.completedBy ? activity.teamState.completedBy.username : 'quelqu\'un';
                statusInfo = `<div class="status-completed">‚úÖ Termin√© par ${completedBy}</div>`;
                actionButton = '<button class="btn btn-secondary" disabled>Termin√©</button>';
            } else if (activity.teamState.isLocked && activity.teamState.currentUser && !activity.canStart) {
                statusInfo = `<div class="status-locked">üîí Utilis√© par ${activity.teamState.currentUser.username}</div>`;
                actionButton = '<button class="btn btn-secondary" disabled>Indisponible</button>';
            } else if (activity.canStart) {
                const buttonText = activity.progress.currentStep > 0 ? 'Continuer' : 'Commencer';
                actionButton = `<button class="btn btn-primary" onclick="startActivity(${activity.id})">${buttonText}</button>`;
            } else {
                actionButton = '<button class="btn btn-secondary" disabled>Indisponible</button>';
            }

            card.innerHTML = `
                <div class="activity-icon">
                    ${categoryIcons[activity.category] || 'üìö'}
                </div>
                <div class="activity-content">
                    <h3>${escapeHtml(activity.title)}</h3>
                    <p class="activity-description">${escapeHtml(activity.description)}</p>
                    <div class="activity-meta">
                        <span class="difficulty-badge" style="background-color: ${difficultyColors[activity.difficulty]}">
                            ${difficultyLabels[activity.difficulty]}
                        </span>
                        <span class="points-info">üèÜ ${activity.maxPoints} pts</span>
                    </div>
                    ${statusInfo}
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progressPercent}%"></div>
                    </div>
                    <div class="progress-text">
                        ${activity.teamState.isCompleted ? 
                            `Points d'√©quipe: ${activity.teamState.pointsEarned}/${activity.maxPoints}` : 
                            `√âtape ${activity.progress.currentStep + 1}`
                        }
                    </div>
                </div>
                <div class="activity-actions">
                    ${actionButton}
                </div>
            `;

            return card;
        }

        function startActivity(activityId) {
            window.location.href = `/activities/${activityId}`;
        }

        function showError(message) {
            const grid = document.getElementById('activitiesGrid');
            grid.innerHTML = `
                <div style="grid-column: 1 / -1; display: flex; justify-content: center;">
                    <div class="profile-section" style="max-width: 500px; text-align: center;">
                        <div class="error-message" style="display: block; margin-bottom: 1.5rem;">
                            <h3 style="color: #c33; margin: 0 0 1rem 0;">‚ö†Ô∏è Erreur de chargement</h3>
                            <p style="margin: 0 0 1rem 0;">${escapeHtml(message)}</p>
                            <button onclick="location.reload()" class="btn btn-primary">üîÑ R√©essayer</button>
                        </div>
                        <div style="color: #666; font-size: 0.9rem;">
                            <p>Assurez-vous d'√™tre connect√© √† une session pour acc√©der aux activit√©s.</p>
                            <div style="margin-top: 1rem;">
                                <a href="/session" class="btn btn-secondary" style="margin-right: 0.5rem;">Rejoindre une session</a>
                                <a href="/dashboard" class="btn btn-outline">Retour au dashboard</a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Charger les activit√©s au d√©marrage
        loadActivities();
    </script>
</body>
</html>
