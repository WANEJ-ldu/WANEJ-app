<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rejoindre une session - WANEJ</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>ðŸŽ® Rejoindre une session</h1>
            <p>Saisissez le code de session pour accÃ©der aux activitÃ©s</p>
        </header>

        <div class="session-form">
            <div class="form-group">
                <label for="sessionCode">Code de session</label>
                <input type="text" id="sessionCode" name="sessionCode" placeholder="Ex: DEMO2025" required>
            </div>
            
            <button id="joinSessionBtn" class="btn btn-primary">Rejoindre la session</button>
            
            <div id="sessionInfo" class="session-info" style="display: none;">
                <h3>Session actuelle</h3>
                <div id="sessionDetails"></div>
                <button id="leaveSessionBtn" class="btn btn-secondary">Quitter la session</button>
            </div>
        </div>

        <div id="message" class="message" style="display: none;"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const sessionCodeInput = document.getElementById('sessionCode');
            const joinSessionBtn = document.getElementById('joinSessionBtn');
            const leaveSessionBtn = document.getElementById('leaveSessionBtn');
            const sessionInfo = document.getElementById('sessionInfo');
            const sessionDetails = document.getElementById('sessionDetails');
            const message = document.getElementById('message');

            // VÃ©rifier si l'utilisateur a dÃ©jÃ  une session
            checkCurrentSession();

            joinSessionBtn.addEventListener('click', function() {
                const code = sessionCodeInput.value.trim();
                if (!code) {
                    showMessage('Veuillez saisir un code de session', 'error');
                    return;
                }
                joinSession(code);
            });

            leaveSessionBtn.addEventListener('click', function() {
                leaveSession();
            });

            function showMessage(text, type) {
                message.textContent = text;
                message.className = `message ${type}`;
                message.style.display = 'block';
                setTimeout(() => {
                    message.style.display = 'none';
                }, 5000);
            }

            function checkCurrentSession() {
                fetch('/api/game-session/current')
                    .then(response => response.json())
                    .then(data => {
                        if (data.gameSession) {
                            displayCurrentSession(data.gameSession);
                        }
                    })
                    .catch(error => {
                        console.log('Aucune session active');
                    });
            }

            function displayCurrentSession(session) {
                sessionDetails.innerHTML = `
                    <p><strong>Nom:</strong> ${session.name}</p>
                    <p><strong>Code:</strong> ${session.code}</p>
                    <p><strong>Description:</strong> ${session.description || 'Aucune description'}</p>
                    ${session.startDate ? `<p><strong>DÃ©but:</strong> ${new Date(session.startDate).toLocaleString()}</p>` : ''}
                    ${session.endDate ? `<p><strong>Fin:</strong> ${new Date(session.endDate).toLocaleString()}</p>` : ''}
                `;
                sessionInfo.style.display = 'block';
                sessionCodeInput.style.display = 'none';
                joinSessionBtn.style.display = 'none';
            }

            function joinSession(code) {
                fetch('/api/game-session/join', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ code: code })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        showMessage(data.error, 'error');
                    } else {
                        showMessage('Session rejointe avec succÃ¨s! Vous pouvez maintenant accÃ©der aux activitÃ©s.', 'success');
                        displayCurrentSession(data.gameSession);
                        // Rediriger vers le dashboard aprÃ¨s un court dÃ©lai
                        setTimeout(() => {
                            window.location.href = '/dashboard';
                        }, 2000);
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showMessage('Erreur lors de la connexion Ã  la session', 'error');
                });
            }

            function leaveSession() {
                fetch('/api/game-session/leave', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        showMessage(data.error, 'error');
                    } else {
                        showMessage('Session quittÃ©e avec succÃ¨s', 'success');
                        sessionInfo.style.display = 'none';
                        sessionCodeInput.style.display = 'block';
                        joinSessionBtn.style.display = 'inline-block';
                        sessionCodeInput.value = '';
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showMessage('Erreur lors de la sortie de session', 'error');
                });
            }
        });
    </script>

    <style>
        .session-form {
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-right: 10px;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #545b62;
        }

        .session-info {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #28a745;
            border-radius: 4px;
            background-color: #d4edda;
        }

        .session-info h3 {
            margin-top: 0;
            color: #155724;
        }

        .message {
            margin-top: 15px;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
        }

        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</body>
</html>
